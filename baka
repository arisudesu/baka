#!/bin/sh

# TODO:
#  * pass backup status to backup_post()?
#  * wrap dangerous operations in functions that won't rm -rf / by accident

sourcex() {
	if [ "$1" = "-e" ]; then
		shift
		[ -e "$1" ] || return 1
	fi
	if ! . "$1"; then
		echo >&2 "$0: error loading $1"
		exit 1
	fi
}

yesno() {
	[ -z "$1" ] && return 1

	case "$1" in
		[Yy][Ee][Ss]|[Tt][Rr][Uu][Ee]|[Oo][Nn]|1) return 0;;
		[Nn][Oo]|[Ff][Aa][Ll][Ss][Ee]|[Oo][Ff][Ff]|0) return 1;;
	esac
}

strinstr() {
	case "$2" in *$1*) return 0;; esac
	return 1
}

# Start debug output
yesno "$BAKA_DEBUG" && set -x

# Override CONFDIR for fun or development
BAKA_CONFDIR=${BAKA_CONFDIR:-/etc/baka}

# chdir to / to ensure nothing is sourced from cwd
cd / || exit 1

# Parse parameters
usage() {
	[ "$1" = 1 ] && echo ""
	echo "Usage: $0 (-h | --help)"
	echo "       $0 [-p | --profile <profile>]"
	exit "$1"
}

if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
	usage 0
fi

if [ "$1" = "-p" ] || [ "$1" = "--profile" ]; then
	if [ -z "$2" ]; then
		echo >&2 "$0: option requires an argument: $1"
		usage >&2 1
	fi
	if strinstr / "$2"; then
		echo >&2 "$0: profile name must not contain slash: $2"
		exit 1
	fi
	backup_profile="$2"
	shift 2
else
	backup_profile=default
fi

if [ $# -gt 0 ]; then
	echo >&2 "$0: extra arguments: $*"
	usage >&2 1
fi

# Load profile
echo "Loading profile: $backup_profile"
sourcex "$BAKA_CONFDIR/profile.d/$backup_profile"

# Verify modules in advance
for m in $backup_modules; do
	if strinstr / "$m"; then
		echo >&2 "$0: module name must not contain slash: $m"
		exit 1
	fi
	if [ ! -e "$BAKA_CONFDIR/module.d/$m" ]; then
		echo >&2 "$0: module listed but was not found: $m"
		exit 1
	fi
done

# Do modules
for m in $backup_modules; do
	echo "Running module: $m"
	(
		BAKA_MODULE=$m; export BAKA_MODULE

		sourcex -e "$BAKA_CONFDIR/conf.d/$m"
		sourcex "$BAKA_CONFDIR/module.d/$m"

		backup_rc_pre=0
		backup_rc_restic=0
		backup_rc_post=0

		if [ "$(command -v "backup_pre")" = "backup_pre" ]; then
			backup_pre; backup_rc_pre=$?
		fi

		echo "Module defined backup paths: $backup_paths"

		if [ "$backup_rc_pre" = 0 ] && [ -n "$backup_paths" ]; then
			env $backup_environ restic backup --tag "$BAKA_MODULE" $backup_paths; backup_rc_restic=$?
		fi

		if [ "$(command -v "backup_post")" = "backup_post" ]; then
			backup_post; backup_rc_post=$?
		fi

		[ "$backup_rc_pre" = 0 ] \
			&& [ "$backup_rc_restic" = 0 ] \
			&& [ "$backup_rc_post" = 0 ]
		backup_rc=$?

		exit $backup_rc
	)
	backup_rc=$?

	if [ "$backup_rc" != 0 ]; then
		echo >&2 "$0: Module $m exited with status: $backup_rc"
		exit 1
	fi

	echo "Module $m completed"
done

echo "Profile $backup_profile completed"
exit 0
